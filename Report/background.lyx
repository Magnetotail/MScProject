#LyX 2.0 created this file. For more info see http://www.lyx.org/
\lyxformat 413
\begin_document
\begin_header
\textclass article
\use_default_options true
\master main.lyx
\maintain_unincluded_children false
\language english
\language_package default
\inputencoding auto
\fontencoding global
\font_roman default
\font_sans default
\font_typewriter default
\font_default_family default
\use_non_tex_fonts false
\font_sc false
\font_osf false
\font_sf_scale 100
\font_tt_scale 100

\graphics default
\default_output_format default
\output_sync 0
\bibtex_command default
\index_command default
\paperfontsize default
\spacing single
\use_hyperref false
\papersize default
\use_geometry false
\use_amsmath 1
\use_esint 1
\use_mhchem 1
\use_mathdots 1
\cite_engine natbib_authoryear
\use_bibtopic false
\use_indices false
\paperorientation portrait
\suppress_date false
\use_refstyle 1
\index Index
\shortcut idx
\color #008000
\end_index
\secnumdepth 3
\tocdepth 3
\paragraph_separation skip
\defskip smallskip
\quotes_language english
\papercolumns 1
\papersides 1
\paperpagestyle default
\tracking_changes false
\output_changes false
\html_math_output 0
\html_css_as_file 0
\html_be_strict false
\end_header

\begin_body

\begin_layout Section
Background
\end_layout

\begin_layout Standard
Networks representing real systems often display a number of topological
 features.
 Of particular interest is the presence of a community structure.
 Vertices may be organised in communities, with many edges joining vertices
 of the same communities and comparatively few edges joining vertices of
 diï¬€erent communities 
\begin_inset CommandInset citation
LatexCommand citep
key "fortunato2010community"

\end_inset

.
 Being able to find these structures can provide insight into how network
 function and topology affect each other.
\end_layout

\begin_layout Standard
Networks such as those provided in the Stanford Large Network Dataset Collection
 
\begin_inset CommandInset citation
LatexCommand citep
key "StanfordUniversity2009"

\end_inset

 are becoming increasingly large and often have millions or billions of
 nodes and edges.
 This poses two main problems for finding community structures:
\end_layout

\begin_layout Enumerate
In order to process these graphs, more main memory is needed than that of
 an average personal computer.
 Therefore, many read and writes are needed to secondary storage which can
 be very computationly expensive.
 For computing efficiently on billions of edges, 
\begin_inset CommandInset citation
LatexCommand citet
key "kyrola2012graphchi"

\end_inset

 developed GraphChi, a disk-based system using a method that breaks large
 graphs up into small parts in a way that minimises the number of random
 read and writes to disk.
\end_layout

\begin_layout Enumerate
Many algorithms used for identifying communities take polynomial time in
 the number of edges and/or vertices 
\begin_inset CommandInset citation
LatexCommand citep
key "fortunato2010community"

\end_inset

.
 This is infeasible for large graphs.
 There are algorithms which can perform community detection in near linear
 time that are suitable for such large graphs:
\end_layout

\begin_deeper
\begin_layout Itemize
Label propagation.
 
\begin_inset CommandInset citation
LatexCommand citep
key "raghavan2007near"

\end_inset


\end_layout

\begin_layout Itemize
Louvain method.
 
\begin_inset CommandInset citation
LatexCommand citep
key "blondel2008fast"

\end_inset


\end_layout

\begin_layout Itemize
ORCA Reduction and ContrAction graph clustering.
 
\begin_inset CommandInset citation
LatexCommand citep
key "delling2009orca"

\end_inset

 
\end_layout

\end_deeper
\begin_layout Standard
Of further interest is the modelling of the network as the union of a dense
 core with a sparsely connected periphery, highlighting the role of each
 node on the basis of its topological position 
\begin_inset CommandInset citation
LatexCommand citep
key "della2013profiling"

\end_inset

.
 
\end_layout

\end_body
\end_document
